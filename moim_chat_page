class MoimChatPage extends StatefulWidget {
  MoimChatPage(this.moimModel ,{Key? key}) : super(key: key);
  MoimModel moimModel;
  @override
  State<MoimChatPage> createState() => _MoimChatPageState();
}

class _MoimChatPageState extends State<MoimChatPage> {
  TextEditingController _textEditingController = TextEditingController();
  ScrollController scrollcontroller  =ScrollController();
  UserModel? myUserModel = Get.find<LoginController>().userModel.value;
  var progressing =false;
  List chatGroupList=[];
  List<MoimChatModel> chatList=[];
  bool initstated = false;
  late MoimModel moimModel;
  @override
  void initState() {
    moimModel  = widget.moimModel;
    logger.d('to string-> '+moimModel.toString());
    super.initState();
    if(!initstated){
      getChatList();
      initstated=true;
    }
  }

  @override
  void dispose() {
    _textEditingController.dispose();
    scrollcontroller.dispose();
    super.dispose();
  }
  void getChatList() async{
    getFirstChatList();
    moimNetworkRepository.getMoimModelStream(widget.moimModel.moimUid!).listen((moim) async{
      if(moimModel.lastChatId != moim.lastChatId )
      {
        if(chatList.length==0){
          logger.d('chatList is empty');
          getFirstChatList(); return;}
        logger.d('${moimModel.lastChatId} != ${moim.lastChatId}, ${chatList.toString()} ');
        moimModel = moim;
        var newList = await moimNetworkRepository.getMoimChatList(widget.moimModel, lastRef: chatList.first.reference);
       if(newList.isNotEmpty){
         if(chatGroupList.first.runtimeType == MoimChatModel){
           if((chatGroupList.first as MoimChatModel).groupingFactor != newList.first.groupingFactor){
             chatGroupList.insert(0,newList.first.groupingFactor);
           }
         }
         chatList.insertAll(0,newList);
         chatGroupList.insertAll(0,newList);
         //scrollcontroller.animateTo(scrollcontroller.position.maxScrollExtent, duration: Duration(milliseconds: 300), curve: Curves.fastOutSlowIn,);
         setState(() {});
       }
      }
    });
  }
  void getFirstChatList() async{
    logger.d('getFirstChatList()');
    var newchatList = await moimNetworkRepository.getMoimChatList(widget.moimModel);
    chatGroupList.clear();
    chatList.clear();
    for(int i=0; i<newchatList.length;i++)
    {
      if(i>1){
        if(newchatList[i].groupingFactor != newchatList[i-1].groupingFactor){
          chatGroupList.add(newchatList[i-1].groupingFactor);
        } }
      chatList.add(newchatList[i]);
      chatGroupList.add(newchatList[i]);
      if(i==newchatList.length-1){
        chatGroupList.add(newchatList[i].groupingFactor);
      }
    }
    if(mounted){setState(() {});}
  }
  @override
  Widget build(BuildContext context) {
    if(myUserModel==null){
      return Center(child: Text('로그인이 필요합니다.',  style: TextStyle(fontWeight: FontWeight.w600, fontSize: 16 ),),);
    }
    if(widget.moimModel.deleted){
      return Center(child: Text('삭제 된 모임입니다.',style: TextStyle(fontWeight: FontWeight.w600, fontSize: 16 )),);
    }
    if(!myUserModel!.moims.contains(widget.moimModel.moimUid)){return Center(child: Text('가입 후에 채팅방을 확인할 수 있습니다.',style: TextStyle(fontWeight: FontWeight.w600, fontSize: 16 ))); }
    return Column(
      mainAxisSize: MainAxisSize.max,
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Expanded(
          child: ColoredBox(
            color: Colors.grey[100]!,
            child: Align(
              alignment: Alignment.topCenter,
              child: ListView(
                reverse: true,
                shrinkWrap: true,
                controller: scrollcontroller,
                children: List.generate(chatGroupList.length, (index) {
                  switch (chatGroupList[index].runtimeType){
                    case String : return Center(child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: common_ss_gap),
                      child: Container(
                          padding: const EdgeInsets.all( common_ss_gap),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: Colors.grey[200]
                          ),
                          child: Text(chatGroupList[index])),
                    ));
                    case MoimChatModel : return
                  chatGroupList[index].makeruid == myUserModel!.uid?
                  moimMyChat(chatGroupList[index]): moimOtherChat(chatGroupList[index], iconsize_ll);
                  }
                  return SizedBox.shrink();
                },
              ),
        ),
            ),
          ),),
        Divider(height: 1, thickness: 1,),
        ColoredBox(
          color: Colors.white,
          child: Row(
            children: [
              SizedBox(width: 10,),
              Expanded(child: TextField(
                decoration: new InputDecoration.collapsed(
                    hintText: ''
                ),
                controller: _textEditingController,
                onChanged: (value){
                  if(value.isNotEmpty){setState(() {});}
                },
              )),
              IconButton(onPressed: () async{
                UserModel? userModel= Get.find<LoginController>().userModel.value;
                if(userModel!=null){ await sendMessage(userModel);}
              }, icon: Icon(Icons.send, color: _textEditingController.text.isEmpty? Colors.grey[500]:maincolor.withOpacity(0.8),))
            ],
          ),
        )
      ],
    );
  }

  Future sendMessage(UserModel userModel) async{
    if(_textEditingController.text.isEmpty){return;}
    setState(() {
      progressing =true;
    });
    Map<String, dynamic> moimChatModel = MoimChatModel.getMapForCreateChat(contents: _textEditingController.text, writerUser: userModel, moimModel: widget.moimModel);
     moimNetworkRepository.sendMoimChat(MoimChatModel.fromMap(moimChatModel));
    _textEditingController.text = "";
    setState(() {
      progressing =false;
    });
  }
}
